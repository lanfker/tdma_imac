/*
 * created by Chuan
 * this fine mainly implements various controllers for the PRK model.
 *
 */


#include "controller.h"
#include "ns3/log.h"
#include "math.h"

NS_LOG_COMPONENT_DEFINE ("Controller");
namespace ns3
{

  NS_OBJECT_ENSURE_REGISTERED (Controller);
  TypeId Controller::GetTypeId (void)
  {
    static TypeId tid = TypeId ("ns3::Controller")
      .SetParent<Object> ()
      .AddConstructor <Controller> ()
      ;
    return tid;
  }
  Controller::Controller ()
  {
    NS_LOG_FUNCTION (this);
  }
  Controller::~Controller ()
  {
    NS_LOG_FUNCTION (this);
  }
  /*
   

  const double Controller::m_pdrToSnr[1000] = {// second version
    0.000000, 1.295600, 1.380200, 1.433900, 1.474500, 1.507400, 1.535500, 1.560000, 1.582000, 1.601900, 
    1.620100, 1.637000, 1.652800, 1.667600, 1.681500, 1.694800, 1.707400, 1.719400, 1.730900, 1.742000, 
    1.752600, 1.762900, 1.772800, 1.782400, 1.791700, 1.800700, 1.809500, 1.818000, 1.826300, 1.834400, 
    1.842300, 1.850100, 1.857600, 1.865000, 1.872300, 1.879400, 1.886400, 1.893200, 1.899900, 1.906500, 
    1.913000, 1.919400, 1.925700, 1.931800, 1.937900, 1.943900, 1.949800, 1.955600, 1.961400, 1.967000, 
    1.972600, 1.978200, 1.983600, 1.989000, 1.994300, 1.999600, 2.004800, 2.009900, 2.015000, 2.020000, 
    2.025000, 2.029900, 2.034800, 2.039600, 2.044400, 2.049100, 2.053800, 2.058400, 2.063000, 2.067600, 
    2.072100, 2.076600, 2.081000, 2.085400, 2.089800, 2.094200, 2.098500, 2.102700, 2.107000, 2.111200, 
    2.115300, 2.119500, 2.123600, 2.127700, 2.131800, 2.135800, 2.139800, 2.143800, 2.147700, 2.151600, 
    2.155500, 2.159400, 2.163300, 2.167100, 2.170900, 2.174700, 2.178500, 2.182200, 2.185900, 2.189600, 
    2.193300, 2.197000, 2.200600, 2.204200, 2.207800, 2.211400, 2.215000, 2.218500, 2.222000, 2.225600, 
    2.229100, 2.232500, 2.236000, 2.239400, 2.242900, 2.246300, 2.249700, 2.253100, 2.256400, 2.259800, 
    2.263100, 2.266500, 2.269800, 2.273100, 2.276400, 2.279600, 2.282900, 2.286200, 2.289400, 2.292600, 
    2.295800, 2.299000, 2.302200, 2.305400, 2.308600, 2.311700, 2.314900, 2.318000, 2.321100, 2.324200, 
    2.327300, 2.330400, 2.333500, 2.336600, 2.339600, 2.342700, 2.345700, 2.348700, 2.351800, 2.354800, 
    2.357800, 2.360800, 2.363800, 2.366700, 2.369700, 2.372700, 2.375600, 2.378600, 2.381500, 2.384400, 
    2.387300, 2.390200, 2.393200, 2.396000, 2.398900, 2.401800, 2.404700, 2.407600, 2.410400, 2.413300, 
    2.416100, 2.419000, 2.421800, 2.424600, 2.427400, 2.430200, 2.433000, 2.435800, 2.438600, 2.441400, 
    2.444200, 2.447000, 2.449800, 2.452500, 2.455300, 2.458000, 2.460800, 2.463500, 2.466200, 2.469000, 
    2.471700, 2.474400, 2.477100, 2.479800, 2.482500, 2.485200, 2.487900, 2.490600, 2.493300, 2.496000, 
    2.498700, 2.501300, 2.504000, 2.506700, 2.509300, 2.512000, 2.514600, 2.517200, 2.519900, 2.522500, 
    2.525100, 2.527800, 2.530400, 2.533000, 2.535600, 2.538200, 2.540800, 2.543400, 2.546000, 2.548600, 
    2.551200, 2.553800, 2.556400, 2.559000, 2.561500, 2.564100, 2.566700, 2.569300, 2.571800, 2.574400, 
    2.576900, 2.579500, 2.582000, 2.584600, 2.587100, 2.589700, 2.592200, 2.594700, 2.597300, 2.599800, 
    2.602300, 2.604800, 2.607400, 2.609900, 2.612400, 2.614900, 2.617400, 2.619900, 2.622400, 2.624900, 
    2.627400, 2.629900, 2.632400, 2.634900, 2.637400, 2.639900, 2.642400, 2.644800, 2.647300, 2.649800, 
    2.652300, 2.654700, 2.657200, 2.659700, 2.662100, 2.664600, 2.667100, 2.669500, 2.672000, 2.674400, 
    2.676900, 2.679400, 2.681800, 2.684300, 2.686700, 2.689100, 2.691600, 2.694000, 2.696500, 2.698900, 
    2.701300, 2.703800, 2.706200, 2.708600, 2.711100, 2.713500, 2.715900, 2.718400, 2.720800, 2.723200, 
    2.725600, 2.728100, 2.730500, 2.732900, 2.735300, 2.737700, 2.740100, 2.742600, 2.745000, 2.747400, 
    2.749800, 2.752200, 2.754600, 2.757000, 2.759400, 2.761800, 2.764200, 2.766600, 2.769000, 2.771400, 
    2.773800, 2.776200, 2.778600, 2.781000, 2.783400, 2.785800, 2.788200, 2.790600, 2.793000, 2.795400, 
    2.797800, 2.800200, 2.802600, 2.804900, 2.807300, 2.809700, 2.812100, 2.814500, 2.816900, 2.819300, 
    2.821700, 2.824000, 2.826400, 2.828800, 2.831200, 2.833600, 2.836000, 2.838300, 2.840700, 2.843100, 
    2.845500, 2.847900, 2.850300, 2.852600, 2.855000, 2.857400, 2.859800, 2.862200, 2.864500, 2.866900, 
    2.869300, 2.871700, 2.874100, 2.876400, 2.878800, 2.881200, 2.883600, 2.886000, 2.888300, 2.890700, 
    2.893100, 2.895500, 2.897900, 2.900200, 2.902600, 2.905000, 2.907400, 2.909800, 2.912100, 2.914500, 
    2.916900, 2.919300, 2.921700, 2.924100, 2.926400, 2.928800, 2.931200, 2.933600, 2.936000, 2.938400, 
    2.940700, 2.943100, 2.945500, 2.947900, 2.950300, 2.952700, 2.955100, 2.957500, 2.959800, 2.962200, 
    2.964600, 2.967000, 2.969400, 2.971800, 2.974200, 2.976600, 2.979000, 2.981400, 2.983800, 2.986200, 
    2.988600, 2.991000, 2.993400, 2.995800, 2.998200, 3.000600, 3.003000, 3.005400, 3.007800, 3.010200, 
    3.012600, 3.015000, 3.017400, 3.019800, 3.022200, 3.024600, 3.027000, 3.029400, 3.031800, 3.034300, 
    3.036700, 3.039100, 3.041500, 3.043900, 3.046300, 3.048800, 3.051200, 3.053600, 3.056000, 3.058500, 
    3.060900, 3.063300, 3.065700, 3.068200, 3.070600, 3.073000, 3.075500, 3.077900, 3.080300, 3.082800, 
    3.085200, 3.087700, 3.090100, 3.092600, 3.095000, 3.097400, 3.099900, 3.102300, 3.104800, 3.107300, 
    3.109700, 3.112200, 3.114600, 3.117100, 3.119500, 3.122000, 3.124500, 3.126900, 3.129400, 3.131900, 
    3.134300, 3.136800, 3.139300, 3.141800, 3.144300, 3.146700, 3.149200, 3.151700, 3.154200, 3.156700, 
    3.159200, 3.161700, 3.164100, 3.166600, 3.169100, 3.171600, 3.174100, 3.176600, 3.179200, 3.181700, 
    3.184200, 3.186700, 3.189200, 3.191700, 3.194200, 3.196800, 3.199300, 3.201800, 3.204300, 3.206900, 
    3.209400, 3.211900, 3.214500, 3.217000, 3.219500, 3.222100, 3.224600, 3.227200, 3.229700, 3.232300, 
    3.234800, 3.237400, 3.240000, 3.242500, 3.245100, 3.247700, 3.250200, 3.252800, 3.255400, 3.257900, 
    3.260500, 3.263100, 3.265700, 3.268300, 3.270900, 3.273500, 3.276100, 3.278700, 3.281300, 3.283900, 
    3.286500, 3.289100, 3.291700, 3.294300, 3.297000, 3.299600, 3.302200, 3.304800, 3.307500, 3.310100, 
    3.312700, 3.315400, 3.318000, 3.320700, 3.323300, 3.326000, 3.328600, 3.331300, 3.334000, 3.336600, 
    3.339300, 3.342000, 3.344600, 3.347300, 3.350000, 3.352700, 3.355400, 3.358100, 3.360800, 3.363500, 
    3.366200, 3.368900, 3.371600, 3.374300, 3.377000, 3.379800, 3.382500, 3.385200, 3.387900, 3.390700, 
    3.393400, 3.396200, 3.398900, 3.401700, 3.404400, 3.407200, 3.409900, 3.412700, 3.415500, 3.418300, 
    3.421000, 3.423800, 3.426600, 3.429400, 3.432200, 3.435000, 3.437800, 3.440600, 3.443400, 3.446200, 
    3.449100, 3.451900, 3.454700, 3.457500, 3.460400, 3.463200, 3.466100, 3.468900, 3.471800, 3.474600, 
    3.477500, 3.480400, 3.483200, 3.486100, 3.489000, 3.491900, 3.494800, 3.497700, 3.500600, 3.503500, 
    3.506400, 3.509300, 3.512300, 3.515200, 3.518100, 3.521000, 3.524000, 3.526900, 3.529900, 3.532800, 
    3.535800, 3.538800, 3.541700, 3.544700, 3.547700, 3.550700, 3.553700, 3.556700, 3.559700, 3.562700, 
    3.565700, 3.568700, 3.571800, 3.574800, 3.577800, 3.580900, 3.583900, 3.587000, 3.590100, 3.593100, 
    3.596200, 3.599300, 3.602400, 3.605500, 3.608600, 3.611700, 3.614800, 3.617900, 3.621000, 3.624100, 
    3.627300, 3.630400, 3.633600, 3.636700, 3.639900, 3.643000, 3.646200, 3.649400, 3.652600, 3.655800, 
    3.659000, 3.662200, 3.665400, 3.668600, 3.671800, 3.675100, 3.678300, 3.681600, 3.684800, 3.688100, 
    3.691300, 3.694600, 3.697900, 3.701200, 3.704500, 3.707800, 3.711100, 3.714400, 3.717800, 3.721100, 
    3.724400, 3.727800, 3.731200, 3.734500, 3.737900, 3.741300, 3.744700, 3.748100, 3.751500, 3.754900, 
    3.758300, 3.761800, 3.765200, 3.768700, 3.772100, 3.775600, 3.779100, 3.782500, 3.786000, 3.789500, 
    3.793000, 3.796600, 3.800100, 3.803600, 3.807200, 3.810700, 3.814300, 3.817900, 3.821500, 3.825000, 
    3.828600, 3.832300, 3.835900, 3.839500, 3.843200, 3.846800, 3.850500, 3.854100, 3.857800, 3.861500, 
    3.865200, 3.868900, 3.872600, 3.876400, 3.880100, 3.883900, 3.887600, 3.891400, 3.895200, 3.899000, 
    3.902800, 3.906600, 3.910500, 3.914300, 3.918200, 3.922000, 3.925900, 3.929800, 3.933700, 3.937600, 
    3.941500, 3.945500, 3.949400, 3.953400, 3.957400, 3.961300, 3.965300, 3.969300, 3.973400, 3.977400, 
    3.981500, 3.985500, 3.989600, 3.993700, 3.997800, 4.001900, 4.006000, 4.010200, 4.014300, 4.018500, 
    4.022700, 4.026900, 4.031100, 4.035300, 4.039600, 4.043800, 4.048100, 4.052400, 4.056700, 4.061000, 
    4.065300, 4.069700, 4.074100, 4.078400, 4.082800, 4.087200, 4.091700, 4.096100, 4.100600, 4.105100, 
    4.109600, 4.114100, 4.118600, 4.123100, 4.127700, 4.132300, 4.136900, 4.141500, 4.146100, 4.150800, 
    4.155500, 4.160100, 4.164900, 4.169600, 4.174300, 4.179100, 4.183900, 4.188700, 4.193500, 4.198400, 
    4.203200, 4.208100, 4.213000, 4.217900, 4.222900, 4.227900, 4.232900, 4.237900, 4.242900, 4.248000, 
    4.253000, 4.258100, 4.263300, 4.268400, 4.273600, 4.278800, 4.284000, 4.289200, 4.294500, 4.299800, 
    4.305100, 4.310500, 4.315800, 4.321200, 4.326600, 4.332100, 4.337600, 4.343100, 4.348600, 4.354100, 
    4.359700, 4.365300, 4.371000, 4.376600, 4.382300, 4.388100, 4.393800, 4.399600, 4.405400, 4.411300, 
    4.417100, 4.423100, 4.429000, 4.435000, 4.441000, 4.447000, 4.453100, 4.459200, 4.465300, 4.471500, 
    4.477700, 4.484000, 4.490300, 4.496600, 4.503000, 4.509300, 4.515800, 4.522300, 4.528800, 4.535300, 
    4.541900, 4.548500, 4.555200, 4.561900, 4.568700, 4.575500, 4.582300, 4.589200, 4.596200, 4.603200, 
    4.610200, 4.617300, 4.624400, 4.631600, 4.638800, 4.646000, 4.653400, 4.660700, 4.668200, 4.675600, 
    4.683200, 4.690700, 4.698400, 4.706100, 4.713800, 4.721700, 4.729500, 4.737500, 4.745400, 4.753500, 
    4.761600, 4.769800, 4.778000, 4.786400, 4.794700, 4.803200, 4.811700, 4.820300, 4.829000, 4.837700, 
    4.846500, 4.855400, 4.864400, 4.873400, 4.882500, 4.891800, 4.901100, 4.910400, 4.919900, 4.929500, 
    4.939100, 4.948800, 4.958700, 4.968600, 4.978600, 4.988800, 4.999000, 5.009300, 5.019800, 5.030300, 
    5.041000, 5.051800, 5.062700, 5.073700, 5.084900, 5.096100, 5.107500, 5.119100, 5.130700, 5.142500, 
    5.154500, 5.166600, 5.178800, 5.191200, 5.203700, 5.216500, 5.229300, 5.242400, 5.255600, 5.269000, 
    5.282600, 5.296400, 5.310300, 5.324500, 5.338900, 5.353500, 5.368300, 5.383400, 5.398600, 5.414200, 
    5.429900, 5.446000, 5.462300, 5.478900, 5.495700, 5.512900, 5.530400, 5.548200, 5.566300, 5.584800, 
    5.603600, 5.622800, 5.642400, 5.662400, 5.682800, 5.703700, 5.725000, 5.746900, 5.769200, 5.792000, 
    5.815400, 5.839400, 5.864100, 5.889300, 5.915300, 5.941900, 5.969400, 5.997600, 6.026700, 6.056700, 
    6.087800, 6.119800, 6.153000, 6.187300, 6.223000, 6.260000, 6.298500, 6.338700, 6.380600, 6.424500, 
    6.470600, 6.518900, 6.569900, 6.623800, 6.680900, 6.741700, 6.806700, 6.876500, 6.951900, 7.033800, 
    7.123500, 7.222600, 7.333400, 7.459000, 7.603800, 7.774900, 7.984200, 8.253300, 8.630800, 9.267900
  };

  const double Controller::m_pdrToSnr[1000] = { // first veresion

    1.124600, 1.399200, 1.565200, 1.686200, 1.782300, 1.862400, 1.931300, 1.991900, 2.046200, 2.095400, 2.140400, 2.182100, 2.220800, 2.257000, 2.291100,
    2.323200, 2.353700, 2.382700, 2.410300, 2.436800, 2.462100, 2.486400, 2.509900, 2.532500, 2.554300, 2.575400, 2.595800, 2.615700, 2.634900, 2.653600,
    2.671800, 2.689500, 2.706800, 2.723700, 2.740100, 2.756200, 2.771900, 2.787300, 2.802400, 2.817100, 2.831600, 2.845700, 2.859700, 2.873300, 2.886700,
    2.899900, 2.912800, 2.925600, 2.938100, 2.950400, 2.962500, 2.974500, 2.986300, 2.997900, 3.009300, 3.020600, 3.031700, 3.042600, 3.053500, 3.064100,
    3.074700, 3.085100, 3.095400, 3.105500, 3.115600, 3.125500, 3.135300, 3.145000, 3.154600, 3.164100, 3.173500, 3.182700, 3.191900, 3.201000, 3.210000,
    3.219000, 3.227800, 3.236500, 3.245200, 3.253800, 3.262300, 3.270700, 3.279000, 3.287300, 3.295500, 3.303700, 3.311700, 3.319700, 3.327600, 3.335500,
    3.343300, 3.351100, 3.358700, 3.366400, 3.373900, 3.381400, 3.388900, 3.396300, 3.403600, 3.410900, 3.418200, 3.425400, 3.432500, 3.439600, 3.446600,
    3.453600, 3.460600, 3.467500, 3.474300, 3.481200, 3.487900, 3.494700, 3.501300, 3.508000, 3.514600, 3.521200, 3.527700, 3.534200, 3.540700, 3.547100,
    3.553500, 3.559800, 3.566100, 3.572400, 3.578600, 3.584800, 3.591000, 3.597200, 3.603300, 3.609400, 3.615400, 3.621400, 3.627400, 3.633400, 3.639300,
    3.645200, 3.651100, 3.656900, 3.662700, 3.668500, 3.674300, 3.680000, 3.685700, 3.691400, 3.697100, 3.702700, 3.708300, 3.713900, 3.719500, 3.725000,
    3.730500, 3.736000, 3.741500, 3.746900, 3.752300, 3.757700, 3.763100, 3.768400, 3.773800, 3.779100, 3.784400, 3.789700, 3.794900, 3.800100, 3.805400,
    3.810600, 3.815700, 3.820900, 3.826000, 3.831100, 3.836200, 3.841300, 3.846400, 3.851400, 3.856500, 3.861500, 3.866500, 3.871400, 3.876400, 3.881300,
    3.886300, 3.891200, 3.896100, 3.901000, 3.905800, 3.910700, 3.915500, 3.920300, 3.925100, 3.929900, 3.934700, 3.939500, 3.944200, 3.948900, 3.953600,
    3.958400, 3.963000, 3.967700, 3.972400, 3.977000, 3.981700, 3.986300, 3.990900, 3.995500, 4.000100, 4.004700, 4.009200, 4.013800, 4.018300, 4.022800,
    4.027300, 4.031800, 4.036300, 4.040800, 4.045300, 4.049700, 4.054200, 4.058600, 4.063000, 4.067400, 4.071800, 4.076200, 4.080600, 4.085000, 4.089300,
    4.093700, 4.098000, 4.102400, 4.106700, 4.111000, 4.115300, 4.119600, 4.123900, 4.128100, 4.132400, 4.136600, 4.140900, 4.145100, 4.149300, 4.153600,
    4.157800, 4.162000, 4.166200, 4.170300, 4.174500, 4.178700, 4.182800, 4.187000, 4.191100, 4.195300, 4.199400, 4.203500, 4.207600, 4.211700, 4.215800,
    4.219900, 4.224000, 4.228000, 4.232100, 4.236100, 4.240200, 4.244200, 4.248300, 4.252300, 4.256300, 4.260300, 4.264300, 4.268300, 4.272300, 4.276300,
    4.280300, 4.284200, 4.288200, 4.292200, 4.296100, 4.300100, 4.304000, 4.307900, 4.311900, 4.315800, 4.319700, 4.323600, 4.327500, 4.331400, 4.335300,
    4.339200, 4.343000, 4.346900, 4.350800, 4.354600, 4.358500, 4.362300, 4.366200, 4.370000, 4.373900, 4.377700, 4.381500, 4.385300, 4.389100, 4.393000,
    4.396800, 4.400600, 4.404300, 4.408100, 4.411900, 4.415700, 4.419500, 4.423200, 4.427000, 4.430800, 4.434500, 4.438300, 4.442000, 4.445700, 4.449500,
    4.453200, 4.456900, 4.460700, 4.464400, 4.468100, 4.471800, 4.475500, 4.479200, 4.482900, 4.486600, 4.490300, 4.494000, 4.497700, 4.501300, 4.505000,
    4.508700, 4.512400, 4.516000, 4.519700, 4.523300, 4.527000, 4.530600, 4.534300, 4.537900, 4.541600, 4.545200, 4.548800, 4.552400, 4.556100, 4.559700,
    4.563300, 4.566900, 4.570500, 4.574100, 4.577700, 4.581300, 4.584900, 4.588500, 4.592100, 4.595700, 4.599300, 4.602900, 4.606500, 4.610000, 4.613600,
    4.617200, 4.620800, 4.624300, 4.627900, 4.631400, 4.635000, 4.638600, 4.642100, 4.645700, 4.649200, 4.652800, 4.656300, 4.659800, 4.663400, 4.666900,
    4.670400, 4.674000, 4.677500, 4.681000, 4.684600, 4.688100, 4.691600, 4.695100, 4.698600, 4.702100, 4.705600, 4.709200, 4.712700, 4.716200, 4.719700,
    4.723200, 4.726700, 4.730200, 4.733700, 4.737200, 4.740600, 4.744100, 4.747600, 4.751100, 4.754600, 4.758100, 4.761600, 4.765000, 4.768500, 4.772000,
    4.775500, 4.778900, 4.782400, 4.785900, 4.789300, 4.792800, 4.796300, 4.799700, 4.803200, 4.806700, 4.810100, 4.813600, 4.817000, 4.820500, 4.824000,
    4.827400, 4.830900, 4.834300, 4.837800, 4.841200, 4.844700, 4.848100, 4.851600, 4.855000, 4.858500, 4.861900, 4.865300, 4.868800, 4.872200, 4.875700,
    4.879100, 4.882500, 4.886000, 4.889400, 4.892900, 4.896300, 4.899700, 4.903200, 4.906600, 4.910000, 4.913500, 4.916900, 4.920300, 4.923700, 4.927200,
    4.930600, 4.934000, 4.937500, 4.940900, 4.944300, 4.947700, 4.951200, 4.954600, 4.958000, 4.961500, 4.964900, 4.968300, 4.971700, 4.975200, 4.978600,
    4.982000, 4.985400, 4.988900, 4.992300, 4.995700, 4.999100, 5.002500, 5.006000, 5.009400, 5.012800, 5.016200, 5.019700, 5.023100, 5.026500, 5.029900,
    5.033400, 5.036800, 5.040200, 5.043600, 5.047100, 5.050500, 5.053900, 5.057300, 5.060800, 5.064200, 5.067600, 5.071100, 5.074500, 5.077900, 5.081300,
    5.084800, 5.088200, 5.091600, 5.095100, 5.098500, 5.101900, 5.105400, 5.108800, 5.112200, 5.115700, 5.119100, 5.122500, 5.126000, 5.129400, 5.132900,
    5.136300, 5.139700, 5.143200, 5.146600, 5.150100, 5.153500, 5.157000, 5.160400, 5.163900, 5.167300, 5.170800, 5.174200, 5.177700, 5.181100, 5.184600,
    5.188000, 5.191500, 5.194900, 5.198400, 5.201900, 5.205300, 5.208800, 5.212200, 5.215700, 5.219200, 5.222600, 5.226100, 5.229600, 5.233100, 5.236500,
    5.240000, 5.243500, 5.247000, 5.250400, 5.253900, 5.257400, 5.260900, 5.264400, 5.267900, 5.271400, 5.274900, 5.278300, 5.281800, 5.285300, 5.288800,
    5.292300, 5.295800, 5.299300, 5.302900, 5.306400, 5.309900, 5.313400, 5.316900, 5.320400, 5.323900, 5.327500, 5.331000, 5.334500, 5.338000, 5.341600,
    5.345100, 5.348600, 5.352200, 5.355700, 5.359200, 5.362800, 5.366300, 5.369900, 5.373400, 5.377000, 5.380500, 5.384100, 5.387700, 5.391200, 5.394800,
    5.398400, 5.401900, 5.405500, 5.409100, 5.412700, 5.416200, 5.419800, 5.423400, 5.427000, 5.430600, 5.434200, 5.437800, 5.441400, 5.445000, 5.448600,
    5.452200, 5.455800, 5.459500, 5.463100, 5.466700, 5.470300, 5.474000, 5.477600, 5.481200, 5.484900, 5.488500, 5.492200, 5.495800, 5.499500, 5.503100,
    5.506800, 5.510500, 5.514100, 5.517800, 5.521500, 5.525100, 5.528800, 5.532500, 5.536200, 5.539900, 5.543600, 5.547300, 5.551000, 5.554700, 5.558400,
    5.562100, 5.565900, 5.569600, 5.573300, 5.577100, 5.580800, 5.584500, 5.588300, 5.592000, 5.595800, 5.599500, 5.603300, 5.607100, 5.610800, 5.614600,
    5.618400, 5.622200, 5.626000, 5.629800, 5.633600, 5.637400, 5.641200, 5.645000, 5.648800, 5.652600, 5.656500, 5.660300, 5.664100, 5.668000, 5.671800,
    5.675700, 5.679600, 5.683400, 5.687300, 5.691200, 5.695000, 5.698900, 5.702800, 5.706700, 5.710600, 5.714500, 5.718400, 5.722400, 5.726300, 5.730200,
    5.734100, 5.738100, 5.742000, 5.746000, 5.749900, 5.753900, 5.757900, 5.761900, 5.765800, 5.769800, 5.773800, 5.777800, 5.781800, 5.785800, 5.789900,
    5.793900, 5.797900, 5.802000, 5.806000, 5.810100, 5.814100, 5.818200, 5.822300, 5.826400, 5.830400, 5.834500, 5.838600, 5.842800, 5.846900, 5.851000,
    5.855100, 5.859300, 5.863400, 5.867600, 5.871700, 5.875900, 5.880100, 5.884300, 5.888500, 5.892700, 5.896900, 5.901100, 5.905300, 5.909500, 5.913800,
    5.918000, 5.922300, 5.926500, 5.930800, 5.935100, 5.939400, 5.943700, 5.948000, 5.952300, 5.956600, 5.961000, 5.965300, 5.969700, 5.974000, 5.978400,
    5.982800, 5.987200, 5.991600, 5.996000, 6.000400, 6.004800, 6.009300, 6.013700, 6.018200, 6.022700, 6.027100, 6.031600, 6.036100, 6.040600, 6.045200,
    6.049700, 6.054200, 6.058800, 6.063400, 6.067900, 6.072500, 6.077100, 6.081700, 6.086300, 6.091000, 6.095600, 6.100300, 6.104900, 6.109600, 6.114300,
    6.119000, 6.123700, 6.128500, 6.133200, 6.137900, 6.142700, 6.147500, 6.152300, 6.157100, 6.161900, 6.166700, 6.171600, 6.176400, 6.181300, 6.186200,
    6.191100, 6.196000, 6.200900, 6.205900, 6.210800, 6.215800, 6.220800, 6.225800, 6.230800, 6.235800, 6.240900, 6.245900, 6.251000, 6.256100, 6.261200,
    6.266300, 6.271500, 6.276600, 6.281800, 6.287000, 6.292200, 6.297400, 6.302700, 6.307900, 6.313200, 6.318500, 6.323800, 6.329100, 6.334500, 6.339900,
    6.345200, 6.350600, 6.356100, 6.361500, 6.367000, 6.372500, 6.378000, 6.383500, 6.389000, 6.394600, 6.400200, 6.405800, 6.411400, 6.417100, 6.422700,
    6.428400, 6.434100, 6.439900, 6.445600, 6.451400, 6.457200, 6.463100, 6.468900, 6.474800, 6.480700, 6.486600, 6.492600, 6.498600, 6.504600, 6.510600,
    6.516600, 6.522700, 6.528800, 6.535000, 6.541100, 6.547300, 6.553600, 6.559800, 6.566100, 6.572400, 6.578700, 6.585100, 6.591500, 6.597900, 6.604400,
    6.610900, 6.617400, 6.624000, 6.630600, 6.637200, 6.643800, 6.650500, 6.657300, 6.664000, 6.670800, 6.677700, 6.684500, 6.691500, 6.698400, 6.705400,
    6.712400, 6.719500, 6.726600, 6.733800, 6.740900, 6.748200, 6.755500, 6.762800, 6.770100, 6.777600, 6.785000, 6.792500, 6.800100, 6.807700, 6.815300,
    6.823000, 6.830700, 6.838500, 6.846400, 6.854300, 6.862300, 6.870300, 6.878300, 6.886500, 6.894700, 6.902900, 6.911200, 6.919600, 6.928000, 6.936500,
    6.945000, 6.953700, 6.962400, 6.971100, 6.979900, 6.988800, 6.997800, 7.006900, 7.016000, 7.025200, 7.034500, 7.043800, 7.053300, 7.062800, 7.072400,
    7.082100, 7.091900, 7.101800, 7.111800, 7.121800, 7.132000, 7.142300, 7.152700, 7.163200, 7.173800, 7.184500, 7.195300, 7.206200, 7.217300, 7.228500,
    7.239800, 7.251200, 7.262800, 7.274500, 7.286400, 7.298400, 7.310500, 7.322900, 7.335300, 7.348000, 7.360800, 7.373700, 7.386900, 7.400300, 7.413800,
    7.427600, 7.441500, 7.455700, 7.470100, 7.484700, 7.499500, 7.514700, 7.530000, 7.545700, 7.561600, 7.577800, 7.594300, 7.611200, 7.628300, 7.645800,
    7.663700, 7.682000, 7.700700, 7.719800, 7.739300, 7.759300, 7.779800, 7.800800, 7.822400, 7.844600, 7.867400, 7.890900, 7.915000, 7.940000, 7.965800,
    7.992400, 8.020000, 8.048700, 8.078400, 8.109400, 8.141800, 8.175600, 8.211100, 8.248400, 8.287700, 8.329400, 8.373700, 8.421000, 8.471900, 8.527000,
    8.587000, 8.653100, 8.726800, 8.810300, 8.907000, 9.022300, 9.166300, 9.360500, 9.669800, 10.858900
  };
  */
    const double Controller::SNR_PDR[SNR_PDR_SAMPLE_NUMBER][2] = { // with channel dynamics
{22.900000, 0.999367},
{22.787212, 0.999034},
{22.675536, 1.000000},
{22.564948, 0.999633},
{22.455430, 0.998792},
{22.346959, 0.999766},
{22.239517, 0.998995},
{22.133083, 0.999808},
{22.027640, 0.999843},
{21.923168, 0.999252},
{21.819651, 0.999996},
{21.717070, 0.997585},
{21.615410, 0.999744},
{21.514653, 0.999998},
{21.414783, 0.999006},
{21.315786, 0.999751},
{21.217646, 0.997688},
{21.120349, 0.995000},
{21.023880, 0.997861},
{20.928224, 0.998633},
{20.833369, 0.996999},
{20.739302, 0.997710},
{20.646008, 0.999998},
{20.553477, 0.998369},
{20.461694, 0.993664},
{20.370649, 0.997748},
{20.280329, 0.996006},
{20.190723, 0.994638},
{20.101820, 0.996069},
{20.013609, 0.991965},
{19.926079, 0.991246},
{19.839219, 0.996787},
{19.753020, 0.995842},
{19.667472, 0.992280},
{19.582565, 0.993483},
{19.498289, 0.992055},
{19.414634, 0.985137},
{19.331593, 0.989647},
{19.249156, 0.991478},
{19.167314, 0.988777},
{19.086058, 0.991731},
{19.005381, 0.993814},
{18.925274, 0.990933},
{18.845729, 0.990624},
{18.766739, 0.980985},
{18.688295, 0.993018},
{18.610390, 0.986984},
{18.533018, 0.985857},
{18.456169, 0.985986},
{18.379838, 0.977313},
{18.304018, 0.984855},
{18.228702, 0.984869},
{18.153882, 0.982059},
{18.079554, 0.981706},
{18.005709, 0.985306},
{17.932343, 0.985479},
{17.859448, 0.985409},
{17.787019, 0.984121},
{17.715050, 0.985248},
{17.643535, 0.975374},
{17.572468, 0.974957},
{17.501845, 0.978537},
{17.431658, 0.978448},
{17.361904, 0.973840},
{17.292576, 0.967870},
{17.223669, 0.973451},
{17.155179, 0.973546},
{17.087100, 0.953853},
{17.019428, 0.970548},
{16.952157, 0.962487},
{16.885283, 0.963396},
{16.818802, 0.957876},
{16.752708, 0.969904},
{16.686997, 0.965050},
{16.621665, 0.964291},
{16.556707, 0.959397},
{16.492119, 0.936593},
{16.427898, 0.946469},
{16.364038, 0.935437},
{16.300536, 0.948023},
{16.237388, 0.951321},
{16.174589, 0.947220},
{16.112137, 0.946834},
{16.050027, 0.947285},
{15.988255, 0.941255},
{15.926818, 0.939268},
{15.865712, 0.942575},
{15.804934, 0.940314},
{15.744480, 0.921480},
{15.684347, 0.939651},
{15.624531, 0.924879},
{15.565029, 0.928425},
{15.505838, 0.924504},
{15.446954, 0.923091},
{15.388375, 0.911538},
{15.330097, 0.904050},
{15.272117, 0.906136},
{15.214431, 0.909703},
{15.157039, 0.919135},
{15.099935, 0.883184},
{15.043117, 0.900458},
{14.986583, 0.911519},
{14.930329, 0.894389},
{14.874353, 0.910139},
{14.818653, 0.900902},
{14.763224, 0.880224},
{14.708066, 0.900489},
{14.653174, 0.898319},
{14.598547, 0.882753},
{14.544182, 0.891759},
{14.490076, 0.889222},
{14.436228, 0.870151},
{14.382634, 0.859626},
{14.329292, 0.862857},
{14.276201, 0.865372},
{14.223356, 0.880900},
{14.170757, 0.863389},
{14.118401, 0.859498},
{14.066286, 0.864120},
{14.014409, 0.853164},
{13.962768, 0.859547},
{13.911362, 0.846215},
{13.860187, 0.838308},
{13.809243, 0.842175},
{13.758527, 0.850674},
{13.708036, 0.835057},
{13.657770, 0.841238},
{13.607725, 0.819197},
{13.557900, 0.830412},
{13.508294, 0.804637},
{13.458903, 0.829587},
{13.409727, 0.808392},
{13.360764, 0.808285},
{13.312010, 0.817053},
{13.263466, 0.807526},
{13.215129, 0.800608},
{13.166997, 0.782695},
{13.119068, 0.795155},
{13.071341, 0.793283},
{13.023815, 0.767390},
{12.976487, 0.771759},
{12.929355, 0.771674},
{12.882419, 0.765828},
{12.835676, 0.768556},
{12.789126, 0.729939},
{12.742765, 0.773102},
{12.696594, 0.745603},
{12.650610, 0.746374},
{12.604811, 0.734705},
{12.559197, 0.746853},
{12.513766, 0.742519},
{12.468516, 0.733966},
{12.423446, 0.722815},
{12.378554, 0.733462},
{12.333840, 0.727683},
{12.289301, 0.701028},
{12.244937, 0.710819},
{12.200745, 0.741776},
{12.156726, 0.696574},
{12.112876, 0.687945},
{12.069196, 0.714533},
{12.025683, 0.700543},
{11.982336, 0.704311},
{11.939155, 0.671889},
{11.896138, 0.676902},
{11.853283, 0.666440},
{11.810589, 0.686627},
{11.768056, 0.623057},
{11.725682, 0.706490},
{11.683465, 0.618602},
{11.641406, 0.642624},
{11.599502, 0.651563},
{11.557752, 0.645824},
{11.516155, 0.625892},
{11.474710, 0.639042},
{11.433417, 0.620776},
{11.392273, 0.632224},
{11.351278, 0.607228},
{11.310431, 0.639288},
{11.269730, 0.595272},
{11.229175, 0.608859},
{11.188765, 0.600081},
{11.148498, 0.585111},
{11.108374, 0.571936},
{11.068391, 0.612424},
{11.028549, 0.610348},
{10.988847, 0.592830},
{10.949282, 0.592315},
{10.909856, 0.605338},
{10.870566, 0.595503},
{10.831412, 0.588399},
{10.792393, 0.589496},
{10.753508, 0.555199},
{10.714755, 0.555559},
{10.676135, 0.573171},
{10.637645, 0.565401},
{10.599286, 0.541213},
{10.561057, 0.517182},
{10.522956, 0.538944},
{10.484982, 0.502693},
{10.447135, 0.532116},
{10.409414, 0.527060},
{10.371819, 0.513105},
{10.334347, 0.527354},
{10.296999, 0.518780},
{10.259774, 0.492589},
{10.222671, 0.522589},
{10.185688, 0.498870},
{10.148826, 0.483889},
{10.112084, 0.466523},
{10.075460, 0.486663},
{10.038954, 0.505076},
{10.002565, 0.471679},
{9.966293, 0.474117},
{9.930136, 0.474890},
{9.894095, 0.465892},
{9.858167, 0.470806},
{9.822353, 0.456104},
{9.786652, 0.471337},
{9.751063, 0.444715},
{9.715586, 0.469065},
{9.680219, 0.447821},
{9.644962, 0.435177},
{9.609814, 0.459309},
{9.574775, 0.446372},
{9.539844, 0.447508},
{9.505021, 0.452095},
{9.470304, 0.401869},
{9.435693, 0.416419},
{9.401187, 0.428053},
{9.366786, 0.424921},
{9.332489, 0.415685},
{9.298296, 0.396112},
{9.264206, 0.388948},
{9.230217, 0.400388},
{9.196331, 0.390124},
{9.162545, 0.396708},
{9.128860, 0.382286},
{9.095274, 0.409171},
{9.061788, 0.357129},
{9.028400, 0.393205},
{8.995111, 0.350295},
{8.961919, 0.359877},
{8.928823, 0.363421},
{8.895825, 0.354453},
{8.862922, 0.338779},
{8.830114, 0.352016},
{8.797401, 0.325041},
{8.764782, 0.350036},
{8.732256, 0.372893},
{8.699824, 0.359805},
{8.667484, 0.330780},
{8.635236, 0.356495},
{8.603080, 0.354839},
{8.571015, 0.332986},
{8.539040, 0.335471},
{8.507155, 0.337168},
{8.475360, 0.345128},
{8.443653, 0.341736},
{8.412035, 0.290377},
{8.380505, 0.298303},
{8.349062, 0.320938},
{8.317706, 0.297009},
{8.286437, 0.313344},
{8.255254, 0.283983},
{8.224156, 0.308238},
{8.193144, 0.268218},
{8.162216, 0.306403},
{8.131372, 0.278543},
{8.100612, 0.285559},
{8.069935, 0.277840},
{8.039341, 0.263519},
{8.008829, 0.262836},
{7.978399, 0.295669},
{7.948051, 0.248799},
{7.917784, 0.280234},
{7.887597, 0.274368},
{7.857491, 0.259003},
{7.827464, 0.264991},
{7.797517, 0.242287},
{7.767648, 0.267417},
{7.737858, 0.251247},
{7.708146, 0.215242},
{7.678512, 0.225164},
{7.648955, 0.249769},
{7.619475, 0.219418},
{7.590071, 0.246751},
{7.560744, 0.232926},
{7.531492, 0.222200},
{7.502315, 0.240851},
{7.473214, 0.232721},
{7.444187, 0.229279},
{7.415234, 0.231952},
{7.386354, 0.224553},
{7.357549, 0.219578},
{7.328816, 0.214667},
{7.300156, 0.204787},
{7.271568, 0.198998},
{7.243052, 0.191522},
{7.214607, 0.221293},
{7.186234, 0.211882},
{7.157932, 0.209781},
{7.129700, 0.173387},
{7.101538, 0.200950},
{7.073446, 0.192903},
{7.045424, 0.193919},
{7.017471, 0.204306},
{6.989586, 0.202717},
{6.961770, 0.196860},
{6.934022, 0.185193},
{6.906341, 0.189780},
{6.878728, 0.170566},
{6.851183, 0.187090},
{6.823704, 0.171786},
{6.796291, 0.166825},
{6.768945, 0.174933},
{6.741664, 0.162982},
{6.714449, 0.174623},
{6.687299, 0.150441},
{6.660214, 0.179051},
{6.633194, 0.170481},
{6.606237, 0.171233},
{6.579345, 0.163913},
{6.552516, 0.137065},
{6.525751, 0.175113},
{6.499049, 0.156560},
{6.472409, 0.163037},
{6.445832, 0.154813},
{6.419318, 0.153680},
{6.392865, 0.138202},
{6.366473, 0.155448},
{6.340143, 0.150181},
{6.313874, 0.135188},
{6.287666, 0.139754},
{6.261518, 0.161034},
{6.235430, 0.140009},
{6.209403, 0.145896},
{6.183434, 0.130861},
{6.157526, 0.120869},
{6.131676, 0.148364},
{6.105885, 0.137634},
{6.080153, 0.140907},
{6.054479, 0.127434},
{6.028863, 0.109308},
{6.003304, 0.117280},
{5.977804, 0.113563},
{5.952360, 0.116179},
{5.926974, 0.133707},
{5.901644, 0.116475},
{5.876370, 0.119862},
{5.851153, 0.122433},
{5.825992, 0.099219},
{5.800887, 0.119955},
{5.775837, 0.125453},
{5.750842, 0.113992},
{5.725903, 0.117648},
{5.701018, 0.107820},
{5.676187, 0.110059},
{5.651411, 0.122712},
{5.626689, 0.103076},
{5.602021, 0.104638},
{5.577406, 0.088443},
{5.552844, 0.090735},
{5.528336, 0.101313},
{5.503881, 0.109108},
{5.479478, 0.083659},
{5.455128, 0.102336},
{5.430829, 0.111387},
{5.406583, 0.096771},
{5.382389, 0.099589},
{5.358246, 0.085766},
{5.334154, 0.093794},
{5.310114, 0.097368},
{5.286124, 0.072146},
{5.262185, 0.089866},
{5.238297, 0.084676},
{5.214459, 0.075474},
{5.190670, 0.072394},
{5.166932, 0.085062},
{5.143243, 0.079402},
{5.119604, 0.083806},
{5.096014, 0.067944},
{5.072472, 0.076259},
{5.048980, 0.100064},
{5.025536, 0.071576},
{5.002141, 0.069954},
{4.978793, 0.075016},
{4.955494, 0.074046},
{4.932243, 0.071431},
{4.909039, 0.070331},
{4.885882, 0.059884},
{4.862773, 0.074057},
{4.839711, 0.067108},
{4.816695, 0.074162},
{4.793727, 0.055242},
{4.770804, 0.066284},
{4.747928, 0.074930},
{4.725098, 0.068505},
{4.702314, 0.069587},
{4.679576, 0.069446},
{4.656883, 0.069358},
{4.634235, 0.068154},
{4.611633, 0.060725},
{4.589076, 0.055625},
{4.566563, 0.057550},
{4.544095, 0.053093},
{4.521672, 0.058488},
{4.499292, 0.057371},
{4.476957, 0.054558},
{4.454666, 0.054133},
{4.432418, 0.043350},
{4.410215, 0.058211},
{4.388054, 0.062346},
{4.365937, 0.050197},
{4.343863, 0.047680},
{4.321831, 0.061806},
{4.299843, 0.054667},
{4.277897, 0.053462},
{4.255993, 0.058992},
{4.234132, 0.044632},
{4.212313, 0.046461},
{4.190535, 0.040792},
{4.168800, 0.047654},
{4.147106, 0.048206},
{4.125453, 0.051213},
{4.103842, 0.045877},
{4.082272, 0.053627},
{4.060743, 0.041790},
{4.039255, 0.048313},
{4.017807, 0.042310},
{3.996400, 0.040424},
{3.975033, 0.032114},
{3.953706, 0.035017},
{3.932420, 0.045860},
{3.911173, 0.048479},
{3.889966, 0.036656},
{3.868799, 0.035366},
{3.847671, 0.030821},
{3.826583, 0.031643},
{3.805533, 0.044034},
{3.784523, 0.038413},
{3.763551, 0.035085},
{3.742619, 0.046701},
{3.721724, 0.038292},
{3.700869, 0.030793},
{3.680051, 0.036731},
{3.659272, 0.038308},
{3.638531, 0.033598},
{3.617827, 0.037647},
{3.597162, 0.030383},
{3.576534, 0.029750},
{3.555943, 0.037253},
{3.535390, 0.039081},
{3.514874, 0.034102},
{3.494395, 0.034556},
{3.473953, 0.032609},
{3.453548, 0.045858},
{3.433179, 0.027706},
{3.412847, 0.032962},
{3.392552, 0.037534},
{3.372292, 0.034589},
{3.352069, 0.032004},
{3.331882, 0.032434},
{3.311731, 0.031427},
{3.291615, 0.023603},
{3.271536, 0.024774},
{3.251491, 0.023284},
{3.231482, 0.029460},
{3.211508, 0.026670},
{3.191570, 0.018603},
{3.171666, 0.026797},
{3.151798, 0.031676},
{3.131964, 0.019535},
{3.112164, 0.030936},
{3.092400, 0.026737},
{3.072669, 0.016145},
{3.052973, 0.022377},
{3.033311, 0.027437},
{3.013683, 0.026990},
{2.994089, 0.020558},
{2.974529, 0.018542},
{2.955003, 0.011447},
{2.935510, 0.026449},
{2.916051, 0.022487},
{2.896625, 0.026524},
{2.877232, 0.018321},
{2.857872, 0.020193},
{2.838546, 0.012290},
{2.819252, 0.017001},
{2.799991, 0.017613},
{2.780762, 0.014483},
{2.761567, 0.015491},
{2.742403, 0.022756},
{2.723273, 0.020728},
{2.704174, 0.019422},
{2.685107, 0.021129},
{2.666073, 0.019399},
{2.647070, 0.020123},
{2.628099, 0.015598},
{2.609160, 0.024708},
{2.590252, 0.023603},
{2.571376, 0.017698},
{2.552532, 0.019070},
{2.533718, 0.013208},
{2.514936, 0.017174},
{2.496185, 0.017028},
{2.477465, 0.013650},
{2.458775, 0.016361},
{2.440117, 0.012473},
{2.421489, 0.016687},
{2.402891, 0.012528},
{2.384324, 0.012958},
{2.365788, 0.013042},
{2.347282, 0.014607},
{2.328806, 0.017800},
{2.310359, 0.013938},
{2.291943, 0.012107},
{2.273557, 0.013731},
{2.255201, 0.014318},
{2.236874, 0.011622},
{2.218577, 0.012834},
{2.200309, 0.012393},
{2.182071, 0.013519},
{2.163862, 0.015797},
{2.145682, 0.011560},
{2.127532, 0.012257},
{2.109410, 0.009699},
{2.091317, 0.013785},
{2.073253, 0.011388},
{2.055218, 0.016900},
{2.037212, 0.011819},
{2.019234, 0.009521},
{2.001284, 0.009492},
{1.983363, 0.013791},
{1.965470, 0.007230},
{1.947606, 0.010117},
{1.929769, 0.011617},
{1.911961, 0.014345},
{1.894180, 0.009989},
{1.876428, 0.010827},
{1.858703, 0.013189},
{1.841005, 0.007778},
{1.823336, 0.017220},
{1.805694, 0.005348},
{1.788079, 0.010651},
{1.770491, 0.013792},
{1.752931, 0.009327},
{1.735398, 0.008173},
{1.717892, 0.014697},
{1.700413, 0.007854},
{1.682961, 0.006287},
{1.665536, 0.008708},
{1.648138, 0.010235},
{1.630766, 0.014192},
{1.613421, 0.012093},
{1.596102, 0.003816},
{1.578810, 0.006978},
{1.561544, 0.007255},
{1.544304, 0.006815},
{1.527091, 0.006976},
{1.509903, 0.010740},
{1.492742, 0.010721},
{1.475606, 0.007374},
{1.458497, 0.010627},
{1.441413, 0.005505},
{1.424355, 0.009321},
{1.407323, 0.008616},
{1.390316, 0.009376},
{1.373334, 0.005325},
{1.356378, 0.005908},
{1.339448, 0.006895},
{1.322542, 0.007731},
{1.305662, 0.007619},
{1.288807, 0.007880},
{1.271977, 0.000498},
{1.255172, 0.007128},
{1.238391, 0.007534},
{1.221636, 0.004277},
{1.204905, 0.005254},
{1.188199, 0.010394},
{1.171517, 0.006226},
{1.154860, 0.003047},
{1.138228, 0.003030},
{1.121620, 0.011019},
{1.105036, 0.005271},
{1.088476, 0.002405},
{1.071941, 0.005630},
{1.055429, 0.003740},
{1.038942, 0.003232},
{1.022478, 0.004771},
{1.006039, 0.005734},
{0.989623, 0.007119},
{0.973231, 0.007461},
{0.956863, 0.002292},
{0.940518, 0.007520},
{0.924197, 0.001013},
{0.907899, 0.004938},
{0.891624, 0.006397},
{0.875373, 0.006893},
{0.859146, 0.002455},
{0.842941, 0.002019}
    };
  double Controller::ComputeSlope (double currentPdr)
  {
    double slope = 0.0; 
    if (currentPdr < 0.002)
    {
      currentPdr = 0.002;
    }
    uint32_t index = GetIndexByPdr (currentPdr);
    if (index == 0)
    {
      return 0;
    }
    double deltaSnr = SNR_PDR[index][0] - SNR_PDR[index -1][0];
    double deltaPdr = SNR_PDR[index][1] - SNR_PDR[index-1][1];
    slope = fabs (deltaPdr / deltaSnr);
    return slope;
  }

  double Controller::ComputeSlope (double currentPdr, double desiredPdr)
  {
    NS_ASSERT (currentPdr != desiredPdr);
    double slope = 0.0; 
    if (currentPdr < 0.002)
    {
      currentPdr = 0.002;
    }
    double deltaSnr = SNR_PDR[GetIndexByPdr (currentPdr)][0] - SNR_PDR[ GetIndexByPdr (desiredPdr)][0];
    slope = fabs ((currentPdr - desiredPdr)/deltaSnr); // the slope at the point PDR=currentPdr in the SNR-to-PDR curve.
    return slope;
  }

  uint32_t Controller::GetIndexByPdr (double pdr)
  {
    if (pdr < 0.002)
    {
      return 0;
    }
    for (uint32_t i = 0; i < SNR_PDR_SAMPLE_NUMBER-1; ++ i)
    {
      if (SNR_PDR[i][1] >= pdr && SNR_PDR[i+1][1] < pdr)
      {
        return i;
      }
    }
    return 0;
  }

  double Controller::GetSnrByPdr (double pdr)
  {
    if (pdr < 0.002)
    {
      pdr = 0.002;
    }
    for (uint32_t i = 1; i < SNR_PDR_SAMPLE_NUMBER; ++ i)
    {
      if (SNR_PDR[i][1] > pdr && SNR_PDR[i-1][1] <= pdr)
      {
        return SNR_PDR[i][0];
      }
    }
    return  SNR_PDR[0][0];
  }


  NS_OBJECT_ENSURE_REGISTERED (PControllerWithReferenceInterference);

  TypeId PControllerWithReferenceInterference::GetTypeId (void)
  {
    static TypeId tid = TypeId ("ns3::PControllerWithReferenceInterference")
      .SetParent<Controller> ()
      .AddConstructor<PControllerWithReferenceInterference> ()
      ;
    return tid;
  }

  PControllerWithReferenceInterference::PControllerWithReferenceInterference ()
  {
    NS_LOG_FUNCTION (this);
  }

  PControllerWithReferenceInterference::~PControllerWithReferenceInterference ()
  {
    NS_LOG_FUNCTION (this);
  }

  double PControllerWithReferenceInterference::GetDeltaInterference(double rxPowerDbm, double expectedPdr, double currentNplusIDbm)
  {
#ifdef ENABLE_RID
    return 0;
#endif
    double a_0 = Controller::ComputeSlope (expectedPdr);
    double b_0 = expectedPdr - Controller::GetSnrByPdr (expectedPdr) * a_0;
    double I_r = rxPowerDbm + (b_0 - expectedPdr)/ a_0;
    double K_p = 1;
    double deltaInterferenceDb = K_p * (I_r - currentNplusIDbm);
    return deltaInterferenceDb;
  }




  NS_OBJECT_ENSURE_REGISTERED (PControllerWithDesiredPdr);

  TypeId PControllerWithDesiredPdr::GetTypeId (void)
  {
    static TypeId tid = TypeId ("ns3::PControllerWithDesiredPdr")
      .SetParent<Controller> ()
      .AddConstructor <PControllerWithDesiredPdr> ()
      ;
    return tid;
  }

  PControllerWithDesiredPdr::PControllerWithDesiredPdr ()
  {
    NS_LOG_FUNCTION (this);
  }

  PControllerWithDesiredPdr::~PControllerWithDesiredPdr ()
  {
    NS_LOG_FUNCTION (this);
  }


  double PControllerWithDesiredPdr::GetDeltaInterference(double desiredPdr, double currentPdr)
  {
#ifdef ENABLE_RID
    return 0;
#endif
    if (currentPdr == 0) 
    {
      currentPdr = 0.002; // the minimum pdr in the simulation;
    }
    double slope = 0.0;

#ifndef NO_PROTECTION // Use protection, E_0 is enabled.
    if (fabs (currentPdr - desiredPdr ) > E_0 )
    {
      slope = Controller::ComputeSlope (currentPdr, desiredPdr);
    }
    else if (fabs (currentPdr - desiredPdr ) <= E_0 )
    {
      slope = Controller::ComputeSlope (currentPdr);
    }
#endif

    double deltaSnr = 0.001/slope;
    double pParameter = -1.0/slope; 
    double deltaInterferenceDb = pParameter * (desiredPdr - currentPdr);
    std::cout<<"p_controller: slope: "<<slope<<"\tpParameter: "<<pParameter<<"\tdeltaSnr: "<<deltaSnr<<"\tdesiredPdr: "<< desiredPdr <<"\tcurrentPdr: "<< currentPdr<<"\tdeltaInterference: "<<deltaInterferenceDb<<std::endl;
    /*
       if (desiredPdr == currentPdr)
       {
       return 0;
       }
       */
    return deltaInterferenceDb;
  }

  NS_OBJECT_ENSURE_REGISTERED (MinimumVarianceController);
  TypeId MinimumVarianceController::GetTypeId (void)
  {
    static TypeId tid = TypeId ("ns3::MinimumVarianceController")
      .SetParent<Controller> ()
      .AddConstructor <MinimumVarianceController> ()
      ;
    return tid;
  }
  MinimumVarianceController::MinimumVarianceController ()
  {
    m_deltaY = DELTA_Y;
    m_ewmaCoefficient = 0.4;
    m_E0 = E_0;
    NS_LOG_FUNCTION (this);
  }
  MinimumVarianceController::~MinimumVarianceController ()
  {
    NS_LOG_FUNCTION (this);
  }
  double MinimumVarianceController::GetDeltaInterference (double desiredPdr, double ewmaCurrentPdr, double estimatedCurrentPdr, bool &conditionTwoMeet)
  {
#ifdef ENABLE_RID
    return 0;
#endif
    double slope = 0;
#ifndef NO_PROTECTION // Use protection, m_E0 is enabled.
    if (fabs (ewmaCurrentPdr - desiredPdr ) > m_E0 )
    {
      conditionTwoMeet = true;
      //slope = Controller::ComputeSlope (ewmaCurrentPdr) > Controller::ComputeSlope (desiredPdr) ? Controller::ComputeSlope (ewmaCurrentPdr) :Controller::ComputeSlope (desiredPdr);
      slope = Controller::ComputeSlope (ewmaCurrentPdr, desiredPdr);
    }
    else if (fabs (ewmaCurrentPdr - desiredPdr ) <= m_E0 )
    {
      slope = Controller::ComputeSlope (ewmaCurrentPdr);
    }
#endif
#ifdef NO_PROTECTION // Do not use protection, always use the current EWMA PDR.
    slope = Controller::ComputeSlope (ewmaCurrentPdr);
#endif
    double deltaInterferenceDb = (m_ewmaCoefficient * ewmaCurrentPdr + (1 - m_ewmaCoefficient) * estimatedCurrentPdr -  desiredPdr - m_deltaY ) /((1 - m_ewmaCoefficient) * slope);
    std::cout<<" controller: desired.pdr: "<<desiredPdr <<" ewma.current.pdr: "<< ewmaCurrentPdr <<" estimated.current.pdr: "<< estimatedCurrentPdr <<" delta.interference.db: "<< deltaInterferenceDb <<" 1/((1-m_ewmaCoefficient)*slope): "<< 1 / ((1- m_ewmaCoefficient) * slope )<<" slope: "<< slope << std::endl;
    return deltaInterferenceDb;
  }
}
